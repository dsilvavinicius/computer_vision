#ifndef TRIANGULATION_DLT_H
#define TRIANGULATION_DLT_H

#include "DltBase.h"

namespace math
{
	/** DLT to reconstruct a 3D point, given a correspondence in two images generated by cameras with matrices P0 and P1. */
	class TriangulationDlt : public DltBase
	{
	public:
		TriangulationDlt( vector< Correspondence>& correspondence, const MatrixXd& P0, const MatrixXd& P1);
		
		int scoreSolution( shared_ptr< vector< Correspondence > > allCorrespondences, const double& threshold);
	
		/** Gets the final reconstructed 3d point. It's the same value returned by getSolution() or solve(), but as
		 * a VectorXd instead of MatrixXd. */
		VectorXd getPoint3D();
	protected:
		void buildAndApplyNormalizers( const VectorXd& centroid0, const double& scale0, const VectorXd& centroid1,
									   const double& scale1 );
		
		void normalize();
		
		MatrixXd createLinearSystem() const;
		
		MatrixXd buildSolutionMatrix( VectorXd& solution ) const;
		
		void denormalize();
		
		void onDenormalizationEnd();
	
	private:
		/** Camera matrix P0. */
		MatrixXd m_P0;
		
		/** Camera matrix P1. */
		MatrixXd m_P1;
	};
}

#endif